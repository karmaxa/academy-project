version: '3'

output: 'prefixed'

tasks:
  code-format:
    cmds:
      - black .
      - isort --virtual-env="{{.ROOT_DIR}}/{{.VENV}}" .
    desc: formats code using black & isort
    dir: "{{.USER_WORKING_DIR}}"

  code-lint:
    cmds:
      - echo 'all linters passed'
    deps:
      - code-lint-black
      - code-lint-isort
      - code-lint-mypy
      - code-lint-flake8
    desc: checks code against linters
    dir: "{{.USER_WORKING_DIR}}"
    silent: true

  run-server-dev:
    cmds:
      - python manage.py runserver
    deps:
      - db-migrate
      - db-loaddata
    desc: runs local dev server
    dir: "{{.ROOT_DIR}}"
    run: once

  run-server-prod:
    cmds:
      - uvicorn project.asgi:application
        --host 0.0.0.0
        --lifespan off
        --loop asyncio
        --port ${PORT:-8000}
        --workers 4
        --ws none
    deps:
      - db-migrate
      - db-loaddata
    desc: runs Uvicorn
    dir: "{{.ROOT_DIR}}"
    run: once

  run-tests-coverage:
    cmds:
      - coverage html
    deps:
      - run-tests
    desc: run tests with coverage
    dir: "{{.ROOT_DIR}}"
    generates:
      - "{{.ROOT_DIR}}/{{.VENV}}/coverage/html/**/*"
    run: once

  run-tests:
    cmds:
      - pytest .
    deps:
      - db-migrate
      - db-loaddata
    desc: runs tests
    dir: "{{.USER_WORKING_DIR}}"
    run: once

  db-loaddata:
    cmds:
      - python manage.py loaddata app_main.student.json
      - python manage.py loaddata app_main.theme.json
      - python manage.py loaddata app_alexander_sidorov.contact.json
    deps:
      - db-migrate
    desc: loads data from fixtures into db
    run: once

  db-migrate:
    cmds:
      - python manage.py makemigrations
      - task: code-format
      - python manage.py migrate
    desc: migrates db
    dir: "{{.ROOT_DIR}}"
    generates:
      - db.sqlite3
    run: once

  code-lint-black:
    cmds:
      - black --check .
    dir: "{{.USER_WORKING_DIR}}"
    internal: true
  code-lint-isort:
    cmds:
      - isort --check-only --virtual-env="{{.ROOT_DIR}}/{{.VENV}}" .
    dir: "{{.USER_WORKING_DIR}}"
    internal: true
  code-lint-mypy:
    cmds:
      - mypy --config-file="{{.ROOT_DIR}}/pyproject.toml"
    dir: "{{.USER_WORKING_DIR}}"
    internal: true
  code-lint-flake8:
    cmds:
      - flake8 --config="{{.ROOT_DIR}}/.flake8" .
    dir: "{{.USER_WORKING_DIR}}"
    internal: true

  docker-up:
    cmds:
      - docker-compose up -d {{.CLI_ARGS}}
    desc: runs all containers
    dir: "{{.ROOT_DIR}}"
    preconditions:
      - docker info
    status:
      - docker-compose exec -it webapp echo 'webapp works'
    run: once

  docker-down:
    cmds:
      - docker-compose down --remove-orphans
    desc: removes containers and networks
    dir: "{{.ROOT_DIR}}"
    preconditions:
      - docker info
    run: once

  build-task-github:
    cmds:
      - >
        docker run --rm -it
        -v $(pwd):/app/:rw
        -e GOBIN=/app/.github/bin
        golang:bullseye@sha256:a0b51fe882f269828b63e7f69e6925f85afc548cf7cf967ecbfbcce6afe6f235
        go install github.com/go-task/task/v3/cmd/task@latest
    desc: builds Task binary for Ubuntu / Github Actions
    dir: "{{.ROOT_DIR}}"

vars:
  VENV:
    sh: poetry env info --path

env:
  PYTHONPATH: "{{.ROOT_DIR}}"
